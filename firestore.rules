rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    // TEST Readonly
    match /readonly/{docId} {
      allow read: if true;
    }
    // User collection is not being used. It had moved to realtime database.
    match /users/{uid} {
      allow read: if true;
      allow create: if true;
      allow update: if 
        // User cannot update his role except admin.
        (notUpdating(['role']) || isAdmin())
        && notUpdating(['registered_at', 'uid'])
        && (request.auth.uid == uid);
      allow delete: if false;
    }
    function isAdmin() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data['role'];
      return role == 888 || role == 999;
    }
  }
}

// Check if the [fields] does not change.
//
// Use this to block chainging on the properties in [fields].
// ```
// allow update: if notUpdating(['a', 'b', 'c']);
// ```
// Fields that are not in the `fields` parameters may change.
function notUpdating(fields) {
  return request.resource.data.diff(resource.data).unchangedKeys().hasAll(fields);
}


