/**
 * Test on user document update through background functions
 *
 */
import "mocha";
import { expect } from "chai";
import { FirebaseAppInitializer } from "../firebase-app-initializer";
import { TestLibrary } from "../test.library.class";
import { User } from "../../src/classes/user/user.class";
import { UserDocument } from "../../src/interfaces/user.interfaces";

new FirebaseAppInitializer();

describe("User create in Firebase Authentication", () => {
  it("Create a user account and user update user doc", async () => {
    const user = await TestLibrary.createUser();

    const re = await TestLibrary.waitUntil(() => User.metaExists(user.uid), 300, 30);

    // If user document has successfully generated by `onUserCreate` background function,
    // it will be true. Otherwise, it will be false.
    expect(re).equals(true);

    // Get the generated user documents.
    const meta = await User.getMeta(user.uid);

    // Do some tests
    expect(meta).to.be.an("object").to.have.property("last_name").equals("");
    expect(meta.has_last_name).equals(false);

    // Update `last_name` and that will trigger `onUserUpdate`
    await User.update(user.uid, { last_name: "Uu" } as UserDocument);

    // wait until background function - `onUserUpdate` runs.
    const reUp = await TestLibrary.waitUntil(
      async () => {
        const got = await User.getMeta(user.uid);
        return got.has_last_name;
      },
      500,
      20
    );
    expect(reUp, "reUp failed").equals(true);

    const updatedMeta = await User.getMeta(user.uid);
    // console.log(updatedMeta);
    expect(updatedMeta.has_last_name).equals(true);

    // Delete the user account in Firebase Authentication and delete user document under `/users` path.
    await TestLibrary.deleteUser(user.uid);
  });
});
